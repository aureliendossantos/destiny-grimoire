---
export const prerender = false

import { getCollection } from "astro:content"
import Layout from "$layouts/Layout.astro"
import { bungieQuery } from "../../../utils/helpers"
import Header from "$components/Header.astro"

const { platform, username } = Astro.params
if (platform != "psn" && platform != "xbox") return Astro.redirect("/404")
const membershipType = platform == "xbox" ? 1 : 2
const membershipId = await bungieQuery(
	`${membershipType}/Stats/GetMembershipIdByDisplayName/${username}/`
)
if (!membershipId) return Astro.redirect("/404")

const userGrimoire = (
	await bungieQuery(`Vanguard/Grimoire/${membershipType}/${membershipId}/`)
).data
if (!userGrimoire) return Astro.redirect("/404")

const cards = Object.entries((await getCollection("cards"))[0].data).map(
	([_, card]) => card
)
const userBonuses = userGrimoire.bonuses

const activeBonuses = userBonuses.filter(
	(b: any) => b.value >= b.threshold
).length
const inProgressBonuses = userBonuses.filter(
	(b: any) => b.value < b.threshold
).length
---

<Layout
	title={`Bonus de Grimoire de ${username}`}
	description={`${activeBonuses} bonus actifs, ${inProgressBonuses} en progression`}
>
	<Header
		h1={username!}
		subtitle={`${userGrimoire.cardCollection.length} cartes // ${userGrimoire.score} points`}
		grimoire={`/${platform}/${username}`}
	/>
	<div class="mx-10">
		<div
			class="max-w-xl grid grid-cols-1 sm:grid-cols-2 sm:gap-x-12 gap-y-4 m-auto my-12"
		>
			<div>
				<h2 class="mb-4 text-slate-500 text-lg tracking-widest font-smcp">
					{activeBonuses} bonus actifs
				</h2>
				<div class="flex flex-col divide-y divide-slate-200">
					{
						userBonuses
							.filter((b: any) => b.value >= b.threshold)
							.map((b: any) => (
								<a
									href={`${b.cardId}`}
									class="py-4 hover:bg-slate-100 transition"
								>
									<h3
										class="font-serif"
										set:html={cards.find((c) => c.cardId == b.cardId)?.cardName}
									/>
									<div class="uppercase text-xs text-slate-700">
										{b.bonusName.replace(" Bonus", "")}
									</div>
									{b.value < b.threshold && (
										<div class="uppercase text-xs leading-relaxed text-slate-700">
											{b.value}/{b.threshold} {b.statName}
										</div>
									)}
								</a>
							))
					}
				</div>
			</div>
			<div>
				<h2 class="mb-4 text-slate-500 text-lg font-smcp tracking-widest">
					{inProgressBonuses} en progression
				</h2>
				<div class="flex flex-col divide-y divide-slate-200">
					{
						userBonuses
							.filter((b: any) => b.value < b.threshold)
							.map((b: any) => (
								<a
									href={`${b.cardId}`}
									class="py-4 hover:bg-slate-100 transition"
								>
									<h3
										class="font-serif"
										set:html={cards.find((c) => c.cardId == b.cardId)?.cardName}
									/>
									<div class="uppercase text-xs text-slate-700">
										{b.bonusName.replace(" Bonus", "")}
									</div>
									{b.value < b.threshold && (
										<div class="uppercase text-xs leading-relaxed text-slate-700">
											{b.value}/{b.threshold} {b.statName}
										</div>
									)}
								</a>
							))
					}
				</div>
			</div>
		</div>
	</div>
</Layout>

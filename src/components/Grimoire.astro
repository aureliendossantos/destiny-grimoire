---
import type { CollectionEntry } from "astro:content"
import CardPreview from "$components/CardPreview.astro"
import type { UserGrimoire } from "$utils/types"

interface Props {
	themes: CollectionEntry<"grimoire">["data"]["themeCollection"]
	cards: CollectionEntry<"cards">["data"]
	userGrimoire?: UserGrimoire
	membershipType?: 1 | 2
	username?: string
}

const { themes, userGrimoire, membershipType, username } = Astro.props
const cards = Object.entries(Astro.props.cards).map(([_, card]) => card)
---

{
	themes.map((theme) => (
		<div>
			<h2
				class="-mb-5 -ml-10 -mt-2 font-serif text-[72px] text-slate-300 sm:-mb-7 sm:-mt-5 sm:text-[96px]"
				set:html={theme.themeName}
			/>
			{theme.pageCollection.map((page) => {
				const userCardsAmount = userGrimoire?.cardCollection.filter(
					(c) => page.cardBriefs.find((b) => b.cardId == c.cardId),
				).length
				if (userCardsAmount == 0) return
				return (
					<div class="relative mb-2 sm:mb-4">
						<div class="absolute top-0 flex origin-top-left rotate-90 items-baseline gap-3 border-l bg-slate-50/70 py-2 pl-4">
							{/* Je replace() pour raccourcir les noms trop longs */}
							<h3
								class="font-smcp text-lg leading-[1.4] text-slate-400 sm:text-xl"
								set:html={page.pageName
									.replace("Histoire&#160;: ", "")
									.replace("Story: ", "")}
							/>
							{userCardsAmount && (
								<span
									class="align-super font-serif text-xs text-slate-500"
									style={{ fontFeatureSettings: '"lnum"' }}
								>
									<span class="inline-block -rotate-90">
										{userCardsAmount}
									</span>
									|
									<span class="inline-block -rotate-90">
										{page.cardBriefs.length}
									</span>
								</span>
							)}
						</div>
						<div class="grid grid-cols-3 gap-2 sm:grid-cols-4 sm:gap-4 md:grid-cols-5 lg:grid-cols-6">
							{page.cardBriefs.map((brief) => {
								if (
									!userGrimoire ||
									userGrimoire.cardCollection.find(
										(c) => c.cardId == brief.cardId,
									)
								) {
									return (
										<CardPreview
											card={
												cards.find(
													(c) =>
														c.cardId ==
														brief.cardId,
												)!
											}
											membershipType={membershipType}
											username={username}
										/>
									)
								}
							})}
						</div>
					</div>
				)
			})}
		</div>
	))
}

---
import type { UserGrimoire } from "$utils/types"
import type { CollectionEntry } from "astro:content"
import CardNavLink from "./CardNavLink.astro"

interface Props {
	cardId: number
	cards: CollectionEntry<"cards">["data"]
	themes: CollectionEntry<"grimoire">["data"]["themeCollection"]
	user?: {
		membershipType: 1 | 2
		name: string
		grimoire: UserGrimoire
	}
}

const { cardId, cards, themes, user } = Astro.props

const userHasCard = user?.grimoire.cardCollection.some(
	(userCard) => userCard.cardId == cardId,
)

const data = themes
	.flatMap((theme) =>
		theme.pageCollection.flatMap((page) =>
			page.cardBriefs.map((brief) => ({
				theme: theme.themeName,
				page: page.pageName,
				card: cards[brief.cardId],
			})),
		),
	)
	.filter(
		(entry) =>
			!user ||
			!userHasCard ||
			user.grimoire.cardCollection.find(
				(c) => c.cardId == entry.card.cardId,
			),
	)
const currentIndex = data.findIndex((entry) => entry.card.cardId === cardId)
const currentEntry = data[currentIndex]
const previousEntry = data[currentIndex - 1]
const nextEntry = data[currentIndex + 1]
---

<div
	class="col-span-3 mt-12 grid grid-cols-2 items-center gap-x-4 gap-y-10 border-t border-slate-200 pt-10 font-serif"
>
	{
		previousEntry && (
			<CardNavLink
				card={previousEntry.card}
				user={user}
				themeTitle={
					previousEntry.theme != currentEntry.theme
						? previousEntry.theme
						: undefined
				}
			/>
		)
	}
	{
		nextEntry && (
			<CardNavLink
				card={nextEntry.card}
				user={user}
				themeTitle={
					nextEntry.theme != currentEntry.theme
						? nextEntry.theme
						: undefined
				}
				next
			/>
		)
	}
</div>
